<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MiGfx</name>
    </assembly>
    <members>
        <member name="T:MiGfx.Animation">
            <summary>
              A sprite-based animation.
            </summary>
        </member>
        <member name="M:MiGfx.Animation.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.Animation.#ctor(MiGfx.Animation)">
            <summary>
              Copy constructor.
            </summary>
            <param name="a">
              The animation to copy from.
            </param>
        </member>
        <member name="M:MiGfx.Animation.#ctor(System.String)">
            <summary>
              Constructor that assigns the ID.
            </summary>
            <param name="id">
              The animation ID.
            </param>
        </member>
        <member name="M:MiGfx.Animation.#ctor(MiGfx.Frame[])">
            <summary>
              Constructs the animation with the given frame(s).
            </summary>
            <param name="fs">
              The list of frames to construct the animation with.
            </param>
            <exception cref="T:System.ArgumentNullException">
              If either the list of frames, or an individual frame is null.
            </exception>
        </member>
        <member name="M:MiGfx.Animation.#ctor(System.String,MiGfx.Frame[])">
            <summary>
              Constructs the animation with the given ID and frames.
            </summary>
            <param name="id">
              The animation ID.
            </param>
            <param name="fs">
              The list of frames to construct the animation with.
            </param>
            <exception cref="T:System.ArgumentNullException">
              If either the list of frames, or an individual frame is null.
            </exception>
        </member>
        <member name="P:MiGfx.Animation.ID">
            <summary>
              ID accessor.
            </summary>
        </member>
        <member name="P:MiGfx.Animation.Item(System.UInt32)">
            <summary>
              Frame accessor.
            </summary>
            <param name="index">
              The index of the desired frame.
            </param>
            <returns>
              The frame at the given index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              See <see cref="M:MiGfx.Animation.Get(System.UInt32)"/> and <see cref="M:MiGfx.Animation.Set(System.UInt32,MiGfx.Frame)"/>.
            </exception>
        </member>
        <member name="P:MiGfx.Animation.Empty">
            <summary>
              If the animation contains no frames.
            </summary>
        </member>
        <member name="P:MiGfx.Animation.Count">
            <summary>
              The amount of frames in the animation.
            </summary>
        </member>
        <member name="P:MiGfx.Animation.Length">
            <summary>
              The total length of the animation.
            </summary>
        </member>
        <member name="M:MiGfx.Animation.Get(System.UInt32)">
            <summary>
              Gets the frame at the given index.
            </summary>
            <param name="index">
              The index of the desired frame.
            </param>
            <returns>
              The frame at the given index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              If the given index is out of range.
            </exception>
        </member>
        <member name="M:MiGfx.Animation.Set(System.UInt32,MiGfx.Frame)">
            <summary>
              Replaces an existing frame with a new one at the given index.
            </summary>
            <param name="index">
              The desired frame index.
            </param>
            <param name="f">
              The new frame.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              If the given index is out of range.
            </exception>
        </member>
        <member name="M:MiGfx.Animation.Add(MiGfx.Frame)">
            <summary>
              Adds a frame to the end of the animation.
            </summary>
            <param name="f">
              The frame to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
              If the frame to add is null.
            </exception>
        </member>
        <member name="M:MiGfx.Animation.Add(MiGfx.Frame[])">
            <summary>
              Adds multiple frames to the end of the animation.
            </summary>
            <param name="fs">
              List of frames to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
              If either the list of frames, or an individual frame is null.
            </exception>
        </member>
        <member name="M:MiGfx.Animation.Remove(System.UInt32)">
            <summary>
              Removes the frame at the given index.
            </summary>
            <param name="index">
              The index of the frame to remove.
            </param>
        </member>
        <member name="M:MiGfx.Animation.RemoveAll">
            <summary>
              Removes all frames from the animation.
            </summary>
        </member>
        <member name="M:MiGfx.Animation.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Loads the object from the stream.
            </summary>
            <param name="br">
              The stream reader.
            </param>
            <returns>
              True if the object was successfully loaded from the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Animation.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Writes the object to the stream.
            </summary>
            <param name="bw">
              The stream writer.
            </param>
            <returns>
              True if the object was successfully written to the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Animation.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.Animation.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.Animation.Equals(MiGfx.Animation)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="T:MiGfx.AnimationSet">
            <summary>
              A set of string indexed animations.
            </summary>
        </member>
        <member name="M:MiGfx.AnimationSet.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.AnimationSet.#ctor(MiGfx.AnimationSet)">
            <summary>
              Copy constructor.
            </summary>
            <param name="a">
              The set to copy from.
            </param>
        </member>
        <member name="P:MiGfx.AnimationSet.Item(System.String)">
            <summary>
              Animation accessor.
            </summary>
            <param name="id">
              The ID of the animation to access.
            </param>
            <returns>
              The animation with the given ID
            </returns>
        </member>
        <member name="P:MiGfx.AnimationSet.Empty">
            <summary>
              If the set contains no animations.
            </summary>
        </member>
        <member name="P:MiGfx.AnimationSet.Count">
            <summary>
              The amount of animations the set contains.
            </summary>
        </member>
        <member name="M:MiGfx.AnimationSet.Contains(System.String)">
            <summary>
              If the set contains an animation with the given ID.
            </summary>
            <param name="id">
              The animation ID.
            </param>
            <returns>
              True if the set contains an animation with the given ID and false
              otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.AnimationSet.Get(System.String)">
            <summary>
              Gets the animation from the set with the given ID.
            </summary>
            <param name="id">
              The animation ID.
            </param>
            <returns>
              The animation from the set with the given ID or null if it does
              not exist.
            </returns>
        </member>
        <member name="M:MiGfx.AnimationSet.Set(MiGfx.Animation)">
            <summary>
              Replaces an existing animation with the given ID with a new one.
            </summary>
            <param name="anim">
              The new animation.
            </param>
            <returns>
              True if an animation with the given ID exists in the set and was
              replaced successfully.
            </returns>
        </member>
        <member name="M:MiGfx.AnimationSet.Add(MiGfx.Animation,System.Boolean)">
            <summary>
              Adds an animation to the set, optionally replacing an existing
              animation with the same ID.
            </summary>
            <param name="anim">
              The animation to add.
            </param>
            <param name="replace">
              If an animation already exists with the same ID, should it be
              replaced?
            </param>
            <returns>
              True if the animation was successfully added to the set and
              false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.AnimationSet.Remove(System.String)">
            <summary>
              Removes the animation with the given ID from the set.
            </summary>
            <param name="name">
              The name of the animation to remove.
            </param>
            <returns>
              True if an animation existed with the given ID and was removed
              successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.AnimationSet.RemoveAll">
            <summary>
              Removes all animations from the set.
            </summary>
        </member>
        <member name="M:MiGfx.AnimationSet.GetEnumerator">
            <summary>
              Gets an enumerator that can enumerate over the collection.
            </summary>
            <returns>
              An enumerator that can enumerate over the collection.
            </returns>
        </member>
        <member name="M:MiGfx.AnimationSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Gets an enumerator that can enumerate over the collection.
            </summary>
            <returns>
              An enumerator that can enumerate over the collection.
            </returns>
        </member>
        <member name="M:MiGfx.AnimationSet.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Loads the object from the stream.
            </summary>
            <param name="br">
              The stream reader.
            </param>
            <returns>
              True if the object was successfully loaded from the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.AnimationSet.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Writes the object to the stream.
            </summary>
            <param name="bw">
              The stream writer.
            </param>
            <returns>
              True if the object was successfully written to the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.AnimationSet.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.AnimationSet.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.AnimationSet.Equals(MiGfx.AnimationSet)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="T:MiGfx.ClickableState">
            <summary>
              Possible clickable state.
            </summary>
        </member>
        <member name="F:MiGfx.ClickableState.Idle">
            <summary>
              If clickable is not being interacted with.
            </summary>
        </member>
        <member name="F:MiGfx.ClickableState.Hover">
            <summary>
              If the mouse is hovering over the clickable.
            </summary>
        </member>
        <member name="F:MiGfx.ClickableState.Click">
            <summary>
              If the clickable has been clicked.
            </summary>
        </member>
        <member name="T:MiGfx.Clickable">
            <summary>
              A component that makes entities clickable.
            </summary>
        </member>
        <member name="M:MiGfx.Clickable.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.Clickable.#ctor(MiGfx.Clickable)">
            <summary>
              Copy constructor.
            </summary>
            <param name="c">
              The object to copy.
            </param>
        </member>
        <member name="P:MiGfx.Clickable.TypeName">
            <summary>
              The component type name.
            </summary>
        </member>
        <member name="P:MiGfx.Clickable.ClickState">
            <summary>
              Current clickable state.
            </summary>
        </member>
        <member name="P:MiGfx.Clickable.Hovering">
            <summary>
              If the mouse is hovering over the entity.
            </summary>
        </member>
        <member name="P:MiGfx.Clickable.Clicked">
            <summary>
              If the entity is being clicked.
            </summary>
        </member>
        <member name="M:MiGfx.Clickable.OnUpdate(System.Single)">
            <summary>
              Updates the component logic.
            </summary>
            <param name="dt">
              Delta time.
            </param>
        </member>
        <member name="M:MiGfx.Clickable.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Clickable.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Clickable.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.Clickable.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.Clickable.Equals(MiGfx.Clickable)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="M:MiGfx.Clickable.Clone">
            <summary>
              Clones this object.
            </summary>
            <returns>
              A clone of this object.
            </returns>
        </member>
        <member name="T:MiGfx.FilePaths">
            <summary>
              Contains file paths.
            </summary>
        </member>
        <member name="F:MiGfx.FilePaths.FillBarTexture">
            <summary>
              Default FillBar texture.
            </summary>
        </member>
        <member name="F:MiGfx.FilePaths.FillBarPadding">
            <summary>
              Fill image padding for default FillBar texture.
            </summary>
        </member>
        <member name="F:MiGfx.FilePaths.ButtonTexture">
            <summary>
              Default button texture.
            </summary>
        </member>
        <member name="F:MiGfx.FilePaths.CheckBoxTexture">
            <summary>
              Default check box texture.
            </summary>
        </member>
        <member name="F:MiGfx.FilePaths.DefaultFont">
            <summary>
              Default font path.
            </summary>
        </member>
        <member name="F:MiGfx.FilePaths.TextBoxTexture">
            <summary>
              Default path to text box texture.
            </summary>
        </member>
        <member name="T:MiGfx.FillBar">
            <summary>
              A bar that fills up with progress.
            </summary>
        </member>
        <member name="M:MiGfx.FillBar.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.FillBar.#ctor(MiGfx.FillBar)">
            <summary>
              Copy constructor.
            </summary>
            <param name="s">
              The object to copy.
            </param>
        </member>
        <member name="M:MiGfx.FillBar.#ctor(System.Single)">
            <summary>
              Constructor setting direction.
            </summary>
            <param name="progress">
              Initial progress.
            </param>
        </member>
        <member name="P:MiGfx.FillBar.Progress">
            <summary>
              Bar progress (between 0 and 1).
            </summary>
        </member>
        <member name="P:MiGfx.FillBar.Background">
            <summary>
              The background image.
            </summary>
        </member>
        <member name="P:MiGfx.FillBar.Fill">
            <summary>
              The fill image.
            </summary>
        </member>
        <member name="P:MiGfx.FillBar.FillPadding">
            <summary>
              Padding around fill image to keep it alligned with the background.
            </summary>
        </member>
        <member name="P:MiGfx.FillBar.TypeName">
            <summary>
              The component type name
            </summary>
        </member>
        <member name="M:MiGfx.FillBar.SetTexture(System.String,SFML.System.Vector2f)">
            <summary>
              Sets up the progress bar with the given texture and fill padding.
            </summary>
            <param name="path">
              The path of the texture.
            </param>
            <param name="padding">
              The padding around the fill section of the texture.
            </param>
            <returns>
              True if the texture loaded successfully and all values were set, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.FillBar.OnUpdate(System.Single)">
            <summary>
              Updates the progress bar.
            </summary>
            <param name="dt">
              Delta time.
            </param>
        </member>
        <member name="M:MiGfx.FillBar.OnDraw(SFML.Graphics.RenderTarget,SFML.Graphics.RenderStates)">
            <summary>
              Draws the object to the render target.
            </summary>
            <param name="target">
              Render target.
            </param>
            <param name="states">
              Render states.
            </param>
        </member>
        <member name="M:MiGfx.FillBar.OnDispose">
            <summary>
              Disposes of the object.
            </summary>
        </member>
        <member name="M:MiGfx.FillBar.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Loads the object from the stream.
            </summary>
            <param name="sr">
              The stream reader
            </param>
            <returns>
              True if the sprite was successfully loaded from the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.FillBar.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Writes the object to the stream.
            </summary>
            <param name="sw">
              The stream writer.
            </param>
            <returns>
              True if the sprite was successfully written to the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.FillBar.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.FillBar.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.FillBar.Clone">
            <summary>
              Clones this object.
            </summary>
            <returns>
              A clone of this object.
            </returns>
        </member>
        <member name="M:MiGfx.FillBar.Equals(MiGfx.FillBar)">
            <summary>
              If this object is considered equal to the other object.
            </summary>
            <param name="other">
              The object to compare to.
            </param>
            <returns>
              True if this object is considered equal to the other object, otherwise false.
            </returns>
        </member>
        <member name="T:MiGfx.Selector">
            <summary>
              A component making an entity selectable.
            </summary>
        </member>
        <member name="M:MiGfx.Selector.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.Selector.#ctor(MiGfx.Selector)">
            <summary>
              Copy constructor.
            </summary>
            <param name="s">
              The object to copy.
            </param>
        </member>
        <member name="P:MiGfx.Selector.SelectedChild">
            <summary>
              The index of the selected child.
            </summary>
        </member>
        <member name="P:MiGfx.Selector.TypeName">
            <summary>
              The component type name
            </summary>
        </member>
        <member name="M:MiGfx.Selector.Select(System.Int32)">
            <summary>
              Selects the child at the given index.
            </summary>
            <param name="index">
              The index of the child to select or a negative value to deselect everything.
            </param>
            <returns>
              True if the parent entity is valid, has a child with a Selectable component at the 
              given index (if index is positive) and was selected (or deselected) successfully.
            </returns>
        </member>
        <member name="M:MiGfx.Selector.SelectNext">
            <summary>
              Selects the next selctable child entity.
            </summary>
            <returns>
              True on success or false if no child to select.
            </returns>
        </member>
        <member name="M:MiGfx.Selector.SelectPrevious">
            <summary>
              Selects the previous selctable child entity.
            </summary>
            <returns>
              True on success or false if no child to select.
            </returns>
        </member>
        <member name="M:MiGfx.Selector.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Loads the object from the stream.
            </summary>
            <param name="sr">
              The stream reader
            </param>
            <returns>
              True if the sprite was successfully loaded from the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Selector.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Writes the object to the stream.
            </summary>
            <param name="sw">
              The stream writer.
            </param>
            <returns>
              True if the sprite was successfully written to the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Selector.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.Selector.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object as an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.Selector.Clone">
            <summary>
              Clones this object.
            </summary>
            <returns>
              A clone of this object.
            </returns>
        </member>
        <member name="T:MiGfx.SpriteAnimator">
            <summary>
              Runs and manages animations and animation sets on sprites.
            </summary>
        </member>
        <member name="M:MiGfx.SpriteAnimator.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.SpriteAnimator.#ctor(MiGfx.SpriteAnimator)">
            <summary>
              Copy constructor.
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:MiGfx.SpriteAnimator.#ctor(MiGfx.AnimationSet,System.String)">
            <summary>
              Constructor setting the initial animation set.
            </summary>
            <param name="set">
              Initial animation set.
            </param>
            <param name="selected">
              The initially selected animation.
            </param>
        </member>
        <member name="P:MiGfx.SpriteAnimator.TypeName">
            <summary>
              Component type name.
            </summary>
        </member>
        <member name="P:MiGfx.SpriteAnimator.Animations">
            <summary>
              The animation set.
            </summary>
        </member>
        <member name="P:MiGfx.SpriteAnimator.Playing">
            <summary>
              If the animator is playing.
            </summary>
        </member>
        <member name="P:MiGfx.SpriteAnimator.Loop">
            <summary>
              If animations should loop.
            </summary>
        </member>
        <member name="P:MiGfx.SpriteAnimator.Multiplier">
            <summary>
              Frame length multiplier.
            </summary>
            <remarks>
              The frame length is multiplied by this number, so a value of 2.0 will make each frame take twice the time
              and 0.5 will make each frame take half the time. Setting this to 0.0 will have the same effect as pausing
              the animation.
            </remarks>
        </member>
        <member name="P:MiGfx.SpriteAnimator.Selected">
            <summary>
              The selected animation ID.
            </summary>
        </member>
        <member name="P:MiGfx.SpriteAnimator.FrameIndex">
            <summary>
              The index of the current frame.
            </summary>
        </member>
        <member name="P:MiGfx.SpriteAnimator.CurrentAnimation">
            <summary>
              Gets the current animation.
            </summary>
        </member>
        <member name="P:MiGfx.SpriteAnimator.CurrentFrame">
            <summary>
              Gets the current frame of the current animation.
            </summary>
        </member>
        <member name="M:MiGfx.SpriteAnimator.Play(System.String)">
            <summary>
              Play the given animation from the beginning, restarting the
              current animation if the ID is invalid.
            </summary>
            <param name="id">
              The ID of the animation to play.
            </param>
        </member>
        <member name="M:MiGfx.SpriteAnimator.Pause">
            <summary>
              Pauses the animation if it is playing.
            </summary>
        </member>
        <member name="M:MiGfx.SpriteAnimator.Stop">
            <summary>
              Stops the currently playing animation on the first frame.
            </summary>
        </member>
        <member name="M:MiGfx.SpriteAnimator.OnUpdate(System.Single)">
            <summary>
              Updates the animator.
            </summary>
            <param name="dt">
              Delta time.
            </param>
        </member>
        <member name="M:MiGfx.SpriteAnimator.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Loads the object from the stream.
            </summary>
            <param name="br">
              The stream reader.
            </param>
            <returns>
              True if the object was successfully loaded from the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.SpriteAnimator.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Writes the object to the stream.
            </summary>
            <param name="bw">
              The stream writer.
            </param>
            <returns>
              True if the object was successfully written to the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.SpriteAnimator.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.SpriteAnimator.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.SpriteAnimator.Equals(MiGfx.SpriteAnimator)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="M:MiGfx.SpriteAnimator.Clone">
            <summary>
              Clones this object.
            </summary>
            <returns>
              A clone of this object.
            </returns>
        </member>
        <member name="T:MiGfx.AssetManager`1">
            <summary>
              Base class for asset managers.
            </summary>
            <typeparam name="T">
              The managed asset type.
            </typeparam>
        </member>
        <member name="M:MiGfx.AssetManager`1.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="P:MiGfx.AssetManager`1.Empty">
            <summary>
              If the manager contains no assets.
            </summary>
        </member>
        <member name="P:MiGfx.AssetManager`1.Count">
            <summary>
              The amount of assets the manager contains.
            </summary>
        </member>
        <member name="M:MiGfx.AssetManager`1.IsLoaded(System.String)">
            <summary>
              If an asset been loaded from the path.
            </summary>
            <param name="path">
              The path of the asset.
            </param>
            <returns>
              True if an asset has already been loaded from the path and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.AssetManager`1.Get(System.String,System.Boolean)">
            <summary>
              Gets the asset loaded from the given path, attempting to load a new one if needed.
            </summary>
            <remarks>
              Please note the given path should be relative to the executable as it will be 
              appended to the executable path.
            </remarks>
            <param name="path">
              The path of the asset.
            </param>
            <param name="reload">
              If an already loaded asset ahould be reloaded.
            </param>
            <returns>
              The asset loaded from the given path or null on failure.
            </returns>
        </member>
        <member name="M:MiGfx.AssetManager`1.Load(System.String,System.Boolean)">
            <summary>
              Loads an asset from the given path.
            </summary>
            <param name="path">
              The path to load the asset from.
            </param>
            <param name="reload">
              If an already existing asset should be reloaded.
            </param>
            <returns>
              True if the asset was/has been loaded successfully and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.AssetManager`1.Unload(System.String)">
            <summary>
              Unloads the asset loaded from the given path.
            </summary>
            <remarks>
              Please note the given path should be relative to the executable as it will be 
              appended to the executable path.
            </remarks>
            <param name="path">
              The path of the asset.
            </param>
            <returns>
              True if the asset existed and was unloaded and removed successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.AssetManager`1.Clear">
            <summary>
              Unloads all assets.
            </summary>
        </member>
        <member name="M:MiGfx.AssetManager`1.Dispose">
            <summary>
              Disposes of all assets.
            </summary>
        </member>
        <member name="F:MiGfx.AssetManager`1.m_assets">
            <summary>
              Dictionary containing assets indexed by their file paths.
            </summary>
        </member>
        <member name="T:MiGfx.Assets">
            <summary>
              Singleton asset manager.
            </summary>
        </member>
        <member name="P:MiGfx.Assets.Manager">
            <summary>
              The singleton manager instance.
            </summary>
        </member>
        <member name="P:MiGfx.Assets.Font">
            <summary>
              Font manager.
            </summary>
        </member>
        <member name="P:MiGfx.Assets.Sound">
            <summary>
              Sound manager.
            </summary>
        </member>
        <member name="P:MiGfx.Assets.Texture">
            <summary>
              Texture manager.
            </summary>
        </member>
        <member name="P:MiGfx.Assets.Disposed">
            <summary>
              If the asset managers have been disposed.
            </summary>
        </member>
        <member name="M:MiGfx.Assets.IsLoaded``1(System.String)">
            <summary>
              If an asset has been loaded from the path.
            </summary>
            <param name="path">
              The path of the asset.
            </param>
            <returns>
              True if an asset has already been loaded from the path and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Assets.Get``1(System.String,System.Boolean)">
            <summary>
              Gets the asset loaded from the given path, attempting to load a new one if needed.
            </summary>
            <remarks>
              Please note the given path should be relative to the executable
              as it will be appended to the executable path.
            </remarks>
            <typeparam name="T">
              The asset type to get.
            </typeparam>
            <param name="path">
              The path of the asset.
            </param>
            <param name="reload">
              If an already loaded asset ahould be reloaded.
            </param>
            <returns>
              The asset loaded from the given path or null if either T is not 
              a valid asset type or on failure.
            </returns>
        </member>
        <member name="M:MiGfx.Assets.Unload``1">
            <summary>
              Unloads all assets of the given type.
            </summary>
            <typeparam name="T">
              The asset type to unload.
            </typeparam>
        </member>
        <member name="M:MiGfx.Assets.Clear">
            <summary>
              Unloads all assets of all types.
            </summary>
        </member>
        <member name="M:MiGfx.Assets.Recreate">
            <summary>
              Recreates the asset managers after being disposed so they can be used again.
            </summary>
        </member>
        <member name="M:MiGfx.Assets.Dispose">
            <summary>
              Disposes of asset managers.
            </summary>
        </member>
        <member name="T:MiGfx.FontManager">
            <summary>
              Manages fonts.
            </summary>
        </member>
        <member name="M:MiGfx.FontManager.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.FontManager.Load(System.String,System.Boolean)">
            <summary>
              Loads an asset from the given path.
            </summary>
            <param name="path">
              The path to load the asset from.
            </param>
            <param name="reload">
              If an already existing asset should be reloaded.
            </param>
            <returns>
              True if the asset was/has been loaded successfully and false
              otherwise.
            </returns>
        </member>
        <member name="T:MiGfx.Paths">
            <summary>
              Contains path related functionality.
            </summary>
        </member>
        <member name="M:MiGfx.Paths.ToWindows(System.String)">
            <summary>
              Swaps path seperator character '/' with '\\' like in windows paths.
            </summary>
            <param name="path">
              The path.
            </param>
            <returns>
              The path with the seperator character '/' replaced with '\\'.
            </returns>
        </member>
        <member name="M:MiGfx.Paths.FromWindows(System.String)">
            <summary>
              Swaps path seperator character '\\' with '/' like in non windows paths.
            </summary>
            <param name="path">
              The path.
            </param>
            <returns>
              The path with the seperator character '\\' replaced with '/'.
            </returns>
        </member>
        <member name="T:MiGfx.FolderPaths">
            <summary>
              Contains folder paths.
            </summary>
        </member>
        <member name="P:MiGfx.FolderPaths.Executable">
            <summary>
              The folder path containing the binary executable.
            </summary>
        </member>
        <member name="F:MiGfx.FolderPaths.Assets">
            <summary>
              Base assets folder.
            </summary>
        </member>
        <member name="F:MiGfx.FolderPaths.Textures">
            <summary>
              Textures folder.
            </summary>
        </member>
        <member name="F:MiGfx.FolderPaths.Fonts">
            <summary>
              Fonts folder.
            </summary>
        </member>
        <member name="F:MiGfx.FolderPaths.Sprites">
            <summary>
              Sprites folder.
            </summary>
        </member>
        <member name="F:MiGfx.FolderPaths.Tilesets">
            <summary>
              Tilesets folder.
            </summary>
        </member>
        <member name="F:MiGfx.FolderPaths.Sounds">
            <summary>
              Sounds folder.
            </summary>
        </member>
        <member name="F:MiGfx.FolderPaths.Music">
            <summary>
              Music folder.
            </summary>
        </member>
        <member name="F:MiGfx.FolderPaths.UI">
            <summary>
              GUI assets folder.
            </summary>
        </member>
        <member name="F:MiGfx.FolderPaths.Settings">
            <summary>
              Settings folder.
            </summary>
        </member>
        <member name="F:MiGfx.FolderPaths.Data">
            <summary>
              Game data folder.
            </summary>
        </member>
        <member name="F:MiGfx.FolderPaths.Databases">
            <summary>
              Database folder.
            </summary>
        </member>
        <member name="F:MiGfx.FolderPaths.Tilemaps">
            <summary>
              Tilemaps folder.
            </summary>
        </member>
        <member name="M:MiGfx.FolderPaths.CreateFolderStructure">
            <summary>
              Creates the entire folder structure.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MiGfx.SoundManager">
            <summary>
              Manages sounds.
            </summary>
        </member>
        <member name="M:MiGfx.SoundManager.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="P:MiGfx.SoundManager.MusicTrack">
            <summary>
              Current music track;
            </summary>
        </member>
        <member name="M:MiGfx.SoundManager.Load(System.String,System.Boolean)">
            <summary>
              Loads an asset from the given path.
            </summary>
            <param name="path">
              The path to load the asset from.
            </param>
            <param name="reload">
              If an already existing asset should be reloaded.
            </param>
            <returns>
              True if the asset was/has been loaded successfully and false
              otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.SoundManager.Dispose">
            <summary>
              Disposes of all assets.
            </summary>
        </member>
        <member name="T:MiGfx.TextureManager">
            <summary>
              Manages textures.
            </summary>
        </member>
        <member name="M:MiGfx.TextureManager.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.TextureManager.Load(System.String,System.Boolean)">
            <summary>
              Loads an asset from the given path.
            </summary>
            <param name="path">
              The path to load the asset from.
            </param>
            <param name="reload">
              If an already existing asset should be reloaded.
            </param>
            <returns>
              True if the asset was/has been loaded successfully and false
              otherwise.
            </returns>
        </member>
        <member name="T:MiGfx.Components">
            <summary>
              Handles component related functionality.
            </summary>
        </member>
        <member name="M:MiGfx.Components.Register">
            <summary>
              Register MiGfx components with the component register.
            </summary>
            <returns>
              True if all components were registered successfully, otherwise false.
            </returns>
        </member>
        <member name="T:MiGfx.TextListener">
            <summary>
              A component that listens for text input events.
            </summary>
        </member>
        <member name="M:MiGfx.TextListener.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.TextListener.#ctor(MiGfx.TextListener)">
            <summary>
              Copy constructor.
            </summary>
            <param name="t">
              The object to copy.
            </param>
        </member>
        <member name="M:MiGfx.TextListener.#ctor(System.String)">
            <summary>
              Constructor setting initial entered text.
            </summary>
            <param name="text">
              Initial entered text.
            </param>
        </member>
        <member name="P:MiGfx.TextListener.TypeName">
            <summary>
              Type string unique to each UI element type.
            </summary>
        </member>
        <member name="P:MiGfx.TextListener.EnteredText">
            <summary>
              Entered text.
            </summary>
        </member>
        <member name="P:MiGfx.TextListener.Listen">
            <summary>
              If the component should listen for text entered events.
            </summary>
        </member>
        <member name="P:MiGfx.TextListener.AllowLetters">
            <summary>
              If letters should be added to the entered text.
            </summary>
        </member>
        <member name="P:MiGfx.TextListener.AllowNumbers">
            <summary>
              If numbers should be added to the entered text (allows one '.').
            </summary>
        </member>
        <member name="P:MiGfx.TextListener.AllowSymbols">
            <summary>
              If symbols should be added to the entered text.
            </summary>
        </member>
        <member name="P:MiGfx.TextListener.AllowPunctuation">
            <summary>
              If punctuation should be added to the entered text.
            </summary>
        </member>
        <member name="P:MiGfx.TextListener.AllowSpace">
            <summary>
              If the space character should be added to the entered text.
            </summary>
        </member>
        <member name="P:MiGfx.TextListener.AllowNewline">
            <summary>
              If entered text can contain newlines.
            </summary>
        </member>
        <member name="M:MiGfx.TextListener.OnTextEntered(SFML.Window.TextEventArgs)">
            <summary>
              Text entered event.
            </summary>
            <param name="e">
              Event arguments.
            </param>
        </member>
        <member name="M:MiGfx.TextListener.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.TextListener.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.TextListener.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.TextListener.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.TextListener.Equals(MiGfx.TextListener)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="M:MiGfx.TextListener.Clone">
            <summary>
              Clones this object.
            </summary>
            <returns>
              A clone of this object.
            </returns>
        </member>
        <member name="T:MiGfx.Frame">
            <summary>
              A sprite-based animation frame.
            </summary>
        </member>
        <member name="M:MiGfx.Frame.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.Frame.#ctor(SFML.Graphics.FloatRect,System.Nullable{SFML.System.Time},System.Nullable{SFML.Graphics.Color})">
            <summary>
              Constructor assigning the texture rect and frame length.
            </summary>
            <param name="rect">
              The texture rect to display on the frame.
            </param>
            <param name="len">
              The length of time the frame lasts; defaults to 1.0 if null.
            </param>
            <param name="col">
              The texture modifier color.
            </param>
        </member>
        <member name="M:MiGfx.Frame.#ctor(MiGfx.Frame)">
            <summary>
              Copy constructor.
            </summary>
            <param name="f">
              The frame to copy from.
            </param>
        </member>
        <member name="P:MiGfx.Frame.Rect">
            <summary>
              The texture rect to display on the frame.
            </summary>
        </member>
        <member name="P:MiGfx.Frame.Length">
            <summary>
              The length of time the frame is displayed.
            </summary>
        </member>
        <member name="P:MiGfx.Frame.Color">
            <summary>
              The texture color modifier.
            </summary>
        </member>
        <member name="M:MiGfx.Frame.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Loads the object from the stream.
            </summary>
            <param name="br">
              The stream reader.
            </param>
            <returns>
              True if the object was successfully loaded from the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Frame.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Writes the object to the stream.
            </summary>
            <param name="bw">
              The stream writer.
            </param>
            <returns>
              True if the object was successfully written to the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Frame.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.Frame.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.Frame.Equals(MiGfx.Frame)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="T:MiGfx.Direction">
            <summary>
              Possible directions.
            </summary>
        </member>
        <member name="F:MiGfx.Direction.Up">
            <summary>
              Up direction.
            </summary>
        </member>
        <member name="F:MiGfx.Direction.Right">
            <summary>
              Right direction.
            </summary>
        </member>
        <member name="F:MiGfx.Direction.Down">
            <summary>
              Down direction.
            </summary>
        </member>
        <member name="F:MiGfx.Direction.Left">
            <summary>
              Left direction.
            </summary>
        </member>
        <member name="T:MiGfx.ImageInfo">
            <summary>
              Image display information.
            </summary>
        </member>
        <member name="M:MiGfx.ImageInfo.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.ImageInfo.#ctor(MiGfx.ImageInfo)">
            <summary>
              Copy constructor.
            </summary>
            <param name="i">
              The image info to copy from.
            </param>
            <exception cref="T:System.ArgumentNullException">
              If <paramref name="i"/> is null.
            </exception>
        </member>
        <member name="M:MiGfx.ImageInfo.#ctor(System.String,System.Nullable{SFML.Graphics.FloatRect},System.Nullable{MiGfx.Direction},System.Nullable{SFML.Graphics.Color})">
            <summary>
              Constructor that assigns texture path along with optional rect, orientation and color.
            </summary>
            <param name="path">
              Texture path.
            </param>
            <param name="rect">
              Texture display rect.
            </param>
            <param name="dir">
              Orientation direction.
            </param>
            <param name="col">
              Texture color modifier.
            </param>
        </member>
        <member name="P:MiGfx.ImageInfo.Path">
            <summary>
              Texture path.
            </summary>
        </member>
        <member name="P:MiGfx.ImageInfo.Rect">
            <summary>
              Texture display rect.
            </summary>
        </member>
        <member name="P:MiGfx.ImageInfo.Color">
            <summary>
              Texture color modifier.
            </summary>
        </member>
        <member name="P:MiGfx.ImageInfo.Orientation">
            <summary>
              Texture orientation modifier.
            </summary>
        </member>
        <member name="P:MiGfx.ImageInfo.IsTextureValid">
            <summary>
              If a valid texture exists at <see cref="P:MiGfx.ImageInfo.Path"/>.
            </summary>
        </member>
        <member name="P:MiGfx.ImageInfo.TextureSize">
            <summary>
              Gets the size of the texture if valid.
            </summary>
        </member>
        <member name="M:MiGfx.ImageInfo.SetFullRect">
            <summary>
              Sets the texture display rect to the full texture.
            </summary>
        </member>
        <member name="M:MiGfx.ImageInfo.GetVertex(System.UInt32,MiGfx.Transform)">
            <summary>
              Calculates and returns the vertex at the given index from top-left to bottom-left.
            </summary>
            <param name="index">
              The index of the vertex.
            </param>
            <param name="tran">
              Transform of the display image.
            </param>
            <returns>
              The vertex at the given index to display the image.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              If index is out of range (greater than 3).
            </exception>
            <exception cref="T:System.ArgumentNullException">
              If transform is null.
            </exception>
        </member>
        <member name="M:MiGfx.ImageInfo.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Loads the object from a stream.
            </summary>
            <param name="br">
              The stream reader.
            </param>
            <returns>
              True if the object was successfully loaded from the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.ImageInfo.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Writes the object to a stream.
            </summary>
            <param name="bw">
              The stream writer.
            </param>
            <returns>
              True if the object was successfully written to the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.ImageInfo.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.ImageInfo.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.ImageInfo.Equals(MiGfx.ImageInfo)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="T:MiGfx.Sprite">
            <summary>
              A graphical sprite.
            </summary>
        </member>
        <member name="M:MiGfx.Sprite.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.Sprite.#ctor(MiGfx.Sprite)">
            <summary>
              Copy constructor.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:MiGfx.Sprite.#ctor(MiGfx.ImageInfo)">
            <summary>
              Constructs the sprite with the given image info.
            </summary>
            <param name="i">
              Image info.
            </param>
        </member>
        <member name="P:MiGfx.Sprite.TypeName">
            <summary>
              Component type name.
            </summary>
        </member>
        <member name="P:MiGfx.Sprite.Image">
            <summary>
              Image info.
            </summary>
        </member>
        <member name="M:MiGfx.Sprite.OnUpdate(System.Single)">
            <summary>
              Updates the sprite geometry. Call this before drawing.
            </summary>
            <param name="dt">
              Delta time.
            </param>
            <exception cref="T:System.ArgumentNullException">
              If <see cref="P:MiGfx.Sprite.Image"/> is null.
            </exception>
        </member>
        <member name="M:MiGfx.Sprite.OnDraw(SFML.Graphics.RenderTarget,SFML.Graphics.RenderStates)">
            <summary>
              Draws the sprite to the render target.
            </summary>
            <param name="target">
              The target to draw to.
            </param>
            <param name="states">
              Render states.
            </param>
        </member>
        <member name="M:MiGfx.Sprite.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Loads the object from the stream.
            </summary>
            <param name="br">
              The stream reader
            </param>
            <returns>
              True if the sprite was successfully loaded from the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Sprite.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Writes the object to the stream.
            </summary>
            <param name="bw">
              The stream writer.
            </param>
            <returns>
              True if the sprite was successfully written to the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Sprite.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.Sprite.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.Sprite.OnDispose">
            <summary>
              Disposes of managed resources.
            </summary>
        </member>
        <member name="M:MiGfx.Sprite.Equals(MiGfx.Sprite)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="M:MiGfx.Sprite.Clone">
            <summary>
              Clones this object.
            </summary>
            <returns>
              A clone of this object.
            </returns>
        </member>
        <member name="T:MiGfx.TextStyle">
            <summary>
              Text style information.
            </summary>
        </member>
        <member name="M:MiGfx.TextStyle.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.TextStyle.#ctor(MiGfx.TextStyle)">
            <summary>
              Copy constructor.
            </summary>
            <param name="i">
              The style to copy from.
            </param>
            <exception cref="T:System.ArgumentNullException">
              If <paramref name="i"/> is null.
            </exception>
        </member>
        <member name="M:MiGfx.TextStyle.#ctor(System.String,System.UInt32,System.UInt32,System.Nullable{SFML.Graphics.Color},System.Single,System.Nullable{SFML.Graphics.Color})">
            <summary>
              Constructor assigning the font path and optionally other
              variables.
            </summary>
            <param name="font">
              Font path.
            </param>
            <param name="size">
              Character size.
            </param>
            <param name="style">
              Font style.
            </param>
            <param name="fill">
              Fill color.
            </param>
            <param name="line">
              Outline thickness.
            </param>
            <param name="outline">
              Outline color.
            </param>
        </member>
        <member name="P:MiGfx.TextStyle.IsFontValid">
            <summary>
              If a valid font exists at <see cref="P:MiGfx.TextStyle.FontPath"/>.
            </summary>
        </member>
        <member name="P:MiGfx.TextStyle.FontPath">
            <summary>
              Font path.
            </summary>
        </member>
        <member name="P:MiGfx.TextStyle.Size">
            <summary>
              Character size.
            </summary>
            <remarks>
              Character size will only be set if the given value is greater
              than zero.
            </remarks>
        </member>
        <member name="P:MiGfx.TextStyle.Style">
            <summary>
              Text style.
            </summary>
        </member>
        <member name="P:MiGfx.TextStyle.Outline">
            <summary>
              Outline thickness.
            </summary>
            <remarks>
              Outline thickness will only be set if the given value is greater
              than or equal to zero.
            </remarks>
        </member>
        <member name="P:MiGfx.TextStyle.FillColor">
            <summary>
              Text fill color.
            </summary>
        </member>
        <member name="P:MiGfx.TextStyle.OutlineColor">
            <summary>
              Text outline color.
            </summary>
        </member>
        <member name="M:MiGfx.TextStyle.SetColor(SFML.Graphics.Color)">
            <summary>
              Sets both the fill and outline colors.
            </summary>
            <param name="col">
              The color to assign.
            </param>
        </member>
        <member name="M:MiGfx.TextStyle.Apply(SFML.Graphics.Text@)">
            <summary>
              Applies the text style to the given text object if it is not null.
            </summary>
            <param name="t">
              The text to assign the style to.
            </param>
        </member>
        <member name="M:MiGfx.TextStyle.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Loads the object from the stream.
            </summary>
            <param name="br">
              The stream reader.
            </param>
            <returns>
              True if the animator was successfully loaded from the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.TextStyle.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Writes the object to the stream.
            </summary>
            <param name="bw">
              The stream writer.
            </param>
            <returns>
              True if the animator was successfully written to the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.TextStyle.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.TextStyle.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.TextStyle.Equals(MiGfx.TextStyle)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="T:MiGfx.Tileset">
            <summary>
              Contains tileset information.
            </summary>
        </member>
        <member name="F:MiGfx.Tileset.DefaultCellSize">
            <summary>
              The default tileset cell size.
            </summary>
        </member>
        <member name="M:MiGfx.Tileset.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.Tileset.#ctor(MiGfx.Tileset)">
            <summary>
              Copy constructor.
            </summary>
            <param name="t">
              The object to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
              If `t` is null.
            </exception>
        </member>
        <member name="M:MiGfx.Tileset.#ctor(System.String,System.String,System.Nullable{SFML.System.Vector2u},System.Nullable{SFML.System.Vector2u},System.Nullable{SFML.System.Vector2u})">
            <summary>
              Constructs the object with the given parameters.
            </summary>
            <param name="id">
              Tileset ID.
            </param>
            <param name="path">
              Texture path.
            </param>
            <param name="size">
              Cell size.
            </param>
            <param name="off">
              Cell offset.
            </param>
            <param name="pad">
              Cell padding.
            </param>
            <exception cref="T:System.ArgumentException">
              If a texture path is provided but loading the texture fails.
            </exception>
        </member>
        <member name="P:MiGfx.Tileset.TextureValid">
            <summary>
              If <see cref="P:MiGfx.Tileset.Texture"/> is valid and leads to a valid texture.
            </summary>
        </member>
        <member name="P:MiGfx.Tileset.Texture">
            <summary>
              The path to the tileset texture.
            </summary>
        </member>
        <member name="P:MiGfx.Tileset.CellSize">
            <summary>
              The size of each individual cell.
            </summary>
        </member>
        <member name="P:MiGfx.Tileset.Size">
            <summary>
              The amount of cells that fit in the texture.
            </summary>
        </member>
        <member name="P:MiGfx.Tileset.CellCount">
            <summary>
              The total amount of cells that fit in the texture.
            </summary>
        </member>
        <member name="P:MiGfx.Tileset.Offset">
            <summary>
              Offset before each cell.
            </summary>
        </member>
        <member name="P:MiGfx.Tileset.Padding">
            <summary>
              Padding after each cell.
            </summary>
        </member>
        <member name="P:MiGfx.Tileset.ID">
            <summary>
              Tileset ID.
            </summary>
        </member>
        <member name="M:MiGfx.Tileset.LoadTexture(System.String,System.Nullable{SFML.System.Vector2u},System.Nullable{SFML.System.Vector2u},System.Nullable{SFML.System.Vector2u})">
            <summary>
              Loads the tileset texture from the given path.
            </summary>
            <param name="path">
              The path to the tileset texture.
            </param>
            <param name="size">
              Optional cell size (null for default).
            </param>
            <param name="off"></param>
              Optional cell offset (null for default).
            <param name="pad">
              Optional cell padding (null for default).
            </param>
            <returns>
              True if the texture was loaded successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.Tileset.GetCellRect(System.UInt32)">
            <summary>
              Gets the texture rect of the cell at the given index.
            </summary>
            <param name="index">
              The cell index.
            </param>
            <returns>
              Returns the texture rect of the cell at the given index.
            </returns>
        </member>
        <member name="M:MiGfx.Tileset.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Loads the object from a stream.
            </summary>
            <param name="br">
              The stream reader.
            </param>
            <returns>
              True if the object was successfully loaded from the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Tileset.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Writes the object to a stream.
            </summary>
            <param name="bw">
              The stream writer.
            </param>
            <returns>
              True if the object was successfully written to the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Tileset.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.Tileset.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.Tileset.Equals(MiGfx.Tileset)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="T:MiGfx.ITransformable">
            <summary>
              Interface for objects with a transform.
            </summary>
        </member>
        <member name="P:MiGfx.ITransformable.Transform">
            <summary>
              The transform.
            </summary>
        </member>
        <member name="T:MiGfx.Transform">
            <summary>
              A 2D transformation.
            </summary>
        </member>
        <member name="M:MiGfx.Transform.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.Transform.#ctor(MiGfx.Transform)">
            <summary>
              Copy constructor.
            </summary>
            <param name="t">
              The transform to copy from.
            </param>
        </member>
        <member name="M:MiGfx.Transform.#ctor(SFML.System.Vector2f,System.Nullable{SFML.System.Vector2f},System.Nullable{SFML.System.Vector2f})">
            <summary>
              Constructor assigning the position and optionally the size and
              scale.
            </summary>
            <param name="pos">
              Transform position.
            </param>
            <param name="size">
              Transform size.
            </param>
            <param name="scale">
              Transform scale.
            </param>
        </member>
        <member name="P:MiGfx.Transform.TypeName">
            <summary>
              Component type name.
            </summary>
        </member>
        <member name="P:MiGfx.Transform.Position">
            <summary>
              Position.
            </summary>
        </member>
        <member name="P:MiGfx.Transform.Size">
            <summary>
              Local size.
            </summary>
        </member>
        <member name="P:MiGfx.Transform.Scale">
            <summary>
              Scale.
            </summary>
        </member>
        <member name="P:MiGfx.Transform.LockPosition">
            <summary>
              Prevents position from being modified if true.
            </summary>
        </member>
        <member name="P:MiGfx.Transform.LockSize">
            <summary>
              Prevents size from being modified if true.
            </summary>
        </member>
        <member name="P:MiGfx.Transform.LockScale">
            <summary>
              Prevents scale from being modified if true.
            </summary>
        </member>
        <member name="P:MiGfx.Transform.Center">
            <summary>
              Center position.
            </summary>
        </member>
        <member name="P:MiGfx.Transform.GlobalSize">
            <summary>
              Scaled size.
            </summary>
        </member>
        <member name="P:MiGfx.Transform.GlobalBounds">
            <summary>
              Scaled bounds of the transform.
            </summary>
        </member>
        <member name="M:MiGfx.Transform.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Loads the object from the stream.
            </summary>
            <param name="br">
              The stream reader.
            </param>
            <returns>
              True if the object was successfully loaded from the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Transform.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Writes the object to a stream.
            </summary>
            <param name="bw">
              The stream writer.
            </param>
            <returns>
              True if the object was successfully written to the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Transform.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.Transform.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.Transform.Equals(MiGfx.Transform)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="M:MiGfx.Transform.Clone">
            <summary>
              Clones this object.
            </summary>
            <returns>
              A clone of this object.
            </returns>
        </member>
        <member name="T:MiGfx.ButtonData">
            <summary>
              Contains visual button info.
            </summary>
        </member>
        <member name="M:MiGfx.ButtonData.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.ButtonData.#ctor(MiGfx.ButtonData)">
            <summary>
              Copy constructor.
            </summary>
            <param name="b">
              The object to copy.
            </param>
        </member>
        <member name="M:MiGfx.ButtonData.#ctor(MiGfx.TextStyle,SFML.System.Vector2f,System.Nullable{SFML.Graphics.Color})">
            <summary>
              Constructor setting text style, offset and texture color.
            </summary>
            <param name="txt">
              The text style.
            </param>
            <param name="off">
              The text offset.
            </param>
            <param name="col">
              The texture color modifier.
            </param>
        </member>
        <member name="P:MiGfx.ButtonData.Color">
            <summary>
              The texture color modifier.
            </summary>
        </member>
        <member name="P:MiGfx.ButtonData.Text">
            <summary>
              The text style.
            </summary>
        </member>
        <member name="P:MiGfx.ButtonData.TextOffset">
            <summary>
              The text offset.
            </summary>
        </member>
        <member name="M:MiGfx.ButtonData.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.ButtonData.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.ButtonData.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.ButtonData.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.ButtonData.Equals(MiGfx.ButtonData)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="T:MiGfx.Button">
            <summary>
              Button component.
            </summary>
        </member>
        <member name="M:MiGfx.Button.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.Button.#ctor(MiGfx.Button)">
            <summary>
             Copy constructor.
            </summary>
            <param name="b">
              The object to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
              Inherited from <see cref="M:MiCore.MiComponent.#ctor(MiCore.MiComponent)"/>.
            </exception>
        </member>
        <member name="P:MiGfx.Button.TypeName">
            <summary>
              Type string unique to each UI element type.
            </summary>
        </member>
        <member name="P:MiGfx.Button.Data">
            <summary>
              Data for each state of the button.
            </summary>
        </member>
        <member name="M:MiGfx.Button.OnUpdate(System.Single)">
            <summary>
              Updates the elements' logic.
            </summary>
            <param name="dt">
              Delta time.
            </param>
        </member>
        <member name="M:MiGfx.Button.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Button.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Button.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.Button.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.Button.Equals(MiGfx.Button)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="M:MiGfx.Button.Clone">
            <summary>
              Clones this object.
            </summary>
            <returns>
              A clone of this object.
            </returns>
        </member>
        <member name="M:MiGfx.Button.Create(System.String,SFML.Graphics.RenderWindow,System.String)">
            <summary>
              Creates an entity and sets it up with a default button and an optional label string.
            </summary>
            <param name="id">
              The entity id.
            </param>
            <param name="window">
              The render window.
            </param>
            <param name="str">
              The label string or null to not add a label.
            </param>
            <returns>
              A valid entity containing the button on success or null on failure.
            </returns>
        </member>
        <member name="T:MiGfx.CheckBoxState">
            <summary>
              Possible state of check box.
            </summary>
        </member>
        <member name="F:MiGfx.CheckBoxState.Unchecked">
            <summary>
              If not selected and not checked.
            </summary>
        </member>
        <member name="F:MiGfx.CheckBoxState.Checked">
            <summary>
              If not selected and checked.
            </summary>
        </member>
        <member name="F:MiGfx.CheckBoxState.SelectedUnchecked">
            <summary>
              If selected and unchecked.
            </summary>
        </member>
        <member name="F:MiGfx.CheckBoxState.SelectedChecked">
            <summary>
              If selected and checked.
            </summary>
        </member>
        <member name="T:MiGfx.CheckBox">
            <summary>
              A toggling check box component.
            </summary>
        </member>
        <member name="M:MiGfx.CheckBox.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.CheckBox.#ctor(MiGfx.CheckBox)">
            <summary>
              Copy constructor.
            </summary>
            <param name="b">
              The object to copy.
            </param>
        </member>
        <member name="M:MiGfx.CheckBox.#ctor(System.Boolean)">
            <summary>
              Constructor setting the initial checked value.
            </summary>
            <param name="check">
              The initial check state of the checkbox.
            </param>
        </member>
        <member name="P:MiGfx.CheckBox.TypeName">
            <summary>
              The component type name.
            </summary>
        </member>
        <member name="P:MiGfx.CheckBox.State">
            <summary>
              Current state of the object.
            </summary>
        </member>
        <member name="P:MiGfx.CheckBox.Colors">
            <summary>
              Array of texture modifier colors for each checkbox state.
            </summary>
        </member>
        <member name="P:MiGfx.CheckBox.Checked">
            <summary>
              If the box is checked.
            </summary>
        </member>
        <member name="M:MiGfx.CheckBox.OnUpdate(System.Single)">
            <summary>
              Updates the component logic.
            </summary>
            <param name="dt">
              Delta time.
            </param>
        </member>
        <member name="M:MiGfx.CheckBox.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.CheckBox.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.CheckBox.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.CheckBox.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.CheckBox.Equals(MiGfx.CheckBox)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="M:MiGfx.CheckBox.Clone">
            <summary>
              Clones this object.
            </summary>
            <returns>
              A clone of this object.
            </returns>
        </member>
        <member name="M:MiGfx.CheckBox.Create(System.String,SFML.Graphics.RenderWindow,System.Boolean)">
            <summary>
              Creates an entity and sets it up with a default checkbox.
            </summary>
            <param name="id">
              The entity id.
            </param>
            <param name="window">
              The render window.
            </param>
            <param name="check">
              If the box should be checked.
            </param>
            <returns>
              A valid entity containing the checkbox on success or null on failure.
            </returns>
        </member>
        <member name="T:MiGfx.Selectable">
            <summary>
              A component making an entity selectable.
            </summary>
        </member>
        <member name="M:MiGfx.Selectable.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.Selectable.#ctor(MiGfx.Selectable)">
            <summary>
              Copy constructor.
            </summary>
            <param name="s">
              The object to copy.
            </param>
        </member>
        <member name="M:MiGfx.Selectable.#ctor(System.Boolean)">
            <summary>
              Constructor setting selected status.
            </summary>
            <param name="selected">
              Selected status.
            </param>
        </member>
        <member name="P:MiGfx.Selectable.Selected">
            <summary>
              If currently selected.
            </summary>
        </member>
        <member name="P:MiGfx.Selectable.TypeName">
            <summary>
              The component type name
            </summary>
        </member>
        <member name="M:MiGfx.Selectable.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Loads the object from the stream.
            </summary>
            <param name="sr">
              The stream reader
            </param>
            <returns>
              True if the sprite was successfully loaded from the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Selectable.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Writes the object to the stream.
            </summary>
            <param name="sw">
              The stream writer.
            </param>
            <returns>
              True if the sprite was successfully written to the stream and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Selectable.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.Selectable.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.Selectable.Clone">
            <summary>
              Clones this object.
            </summary>
            <returns>
              A clone of this object.
            </returns>
        </member>
        <member name="T:MiGfx.Allignment">
            <summary>
              Possible transform allignments.
            </summary>
        </member>
        <member name="F:MiGfx.Allignment.TopLeft">
            <summary>
              Allign to the top left of the transform.
            </summary>
        </member>
        <member name="F:MiGfx.Allignment.Top">
            <summary>
              Allign to the top middle of the transform.
            </summary>
        </member>
        <member name="F:MiGfx.Allignment.TopRight">
            <summary>
              Allign to the top right of the transform.
            </summary>
        </member>
        <member name="F:MiGfx.Allignment.MiddleLeft">
            <summary>
              Allign to the middle left of the transform.
            </summary>
        </member>
        <member name="F:MiGfx.Allignment.Middle">
            <summary>
              Allign to the middle of the transform.
            </summary>
        </member>
        <member name="F:MiGfx.Allignment.MiddleRight">
            <summary>
              Allign to the middle right of the transform.
            </summary>
        </member>
        <member name="F:MiGfx.Allignment.BottomLeft">
            <summary>
              Allign to the bottom left of the transform.
            </summary>
        </member>
        <member name="F:MiGfx.Allignment.Bottom">
            <summary>
              Allign to the bottom of the transform.
            </summary>
        </member>
        <member name="F:MiGfx.Allignment.BottomRight">
            <summary>
              Allign to the bottom right of the transform.
            </summary>
        </member>
        <member name="T:MiGfx.Label">
            <summary>
              A text label component.
            </summary>
        </member>
        <member name="M:MiGfx.Label.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.Label.#ctor(MiGfx.Label)">
            <summary>
              Copy constructor.
            </summary>
            <param name="l">
              The label to copy from.
            </param>
        </member>
        <member name="M:MiGfx.Label.#ctor(System.String,MiGfx.Allignment)">
            <summary>
              Constructs the label and sets its display string.
            </summary>
            <param name="str">
              Display string. If null or whitespace it will be replaced with an empty string.
            </param>
            <param name="allign">
              Text allignment.
            </param>
        </member>
        <member name="M:MiGfx.Label.#ctor(MiGfx.TextStyle,System.String,MiGfx.Allignment)">
            <summary>
              Constructs the label with a text style and an optional string.
            </summary>
            <param name="text">
              Text style.
            </param>
            <param name="str">
              Display string. If null or whitespace it will be replaced with an
              empty string.
            </param>
            <param name="allign">
              Text allignment.
            </param>
        </member>
        <member name="P:MiGfx.Label.TypeName">
            <summary>
              The component type name.
            </summary>
        </member>
        <member name="P:MiGfx.Label.Text">
            <summary>
              Text style.
            </summary>
        </member>
        <member name="P:MiGfx.Label.String">
            <summary>
              Display string.
            </summary>
        </member>
        <member name="P:MiGfx.Label.Offset">
            <summary>
              Text offset.
            </summary>
        </member>
        <member name="P:MiGfx.Label.Allign">
            <summary>
              Text allignment.
            </summary>
        </member>
        <member name="M:MiGfx.Label.GetTextBounds">
            <summary>
              Gets the global bounds from the internal text object. (For use before
              <see cref="M:MiCore.MiObject.Update(System.Single)"/> has is called).
            </summary>
            <remarks>
              Only needed before the first call to <see cref="M:MiCore.MiObject.Update(System.Single)"/>.
              The use <see cref="P:MiGfx.Transform.GlobalBounds"/>.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:MiGfx.Label.OnUpdate(System.Single)">
            <summary>
              Updates the component logic.
            </summary>
            <param name="dt">
              Delta time.
            </param>
        </member>
        <member name="M:MiGfx.Label.OnDraw(SFML.Graphics.RenderTarget,SFML.Graphics.RenderStates)">
            <summary>
              Draws the component.
            </summary>
            <param name="target">
              The render target to draw to.
            </param>
            <param name="states">
              Render states.
            </param>
        </member>
        <member name="M:MiGfx.Label.OnDispose">
            <summary>
              Called when disposing of the object.
            </summary>
        </member>
        <member name="M:MiGfx.Label.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Label.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.Label.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.Label.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.Label.Equals(MiGfx.Label)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="M:MiGfx.Label.GetTypeName">
            <summary>
              Gets the type name.
            </summary>
            <returns>
              The type name.
            </returns>
        </member>
        <member name="M:MiGfx.Label.Clone">
            <summary>
              Clones this object.
            </summary>
            <returns>
              A clone of this object.
            </returns>
        </member>
        <member name="T:MiGfx.TextBoxData">
            <summary>
              Textbox state info.
            </summary>
        </member>
        <member name="M:MiGfx.TextBoxData.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.TextBoxData.#ctor(MiGfx.TextBoxData)">
            <summary>
              Copy constructor.
            </summary>
            <param name="t">
              Object to copy.
            </param>
        </member>
        <member name="M:MiGfx.TextBoxData.#ctor(MiGfx.ImageInfo,MiGfx.TextStyle,System.Nullable{SFML.System.Vector2f})">
            <summary>
              Constructor setting image, text style and text offset.
            </summary>
            <param name="img">
              The image.
            </param>
            <param name="txt">
              The text style.
            </param>
            <param name="off">
              The text offset.
            </param>
        </member>
        <member name="P:MiGfx.TextBoxData.Image">
            <summary>
              Background image.
            </summary>
        </member>
        <member name="P:MiGfx.TextBoxData.Text">
            <summary>
              Text style.
            </summary>
        </member>
        <member name="P:MiGfx.TextBoxData.TextOffset">
            <summary>
              Text offset.
            </summary>
        </member>
        <member name="M:MiGfx.TextBoxData.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.TextBoxData.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.TextBoxData.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.TextBoxData.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.TextBoxData.Equals(MiGfx.TextBoxData)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="T:MiGfx.TextBox">
            <summary>
              A UI text box.
            </summary>
        </member>
        <member name="M:MiGfx.TextBox.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiGfx.TextBox.#ctor(MiGfx.TextBox)">
            <summary>
              Copy constructor.
            </summary>
            <param name="b">
              The object to copy.
            </param>
        </member>
        <member name="M:MiGfx.TextBox.#ctor(MiGfx.TextBoxData,MiGfx.TextBoxData)">
            <summary>
              Constructs a text box with selected and/or deselected data.
            </summary>
            <param name="s">
              Selected data.
            </param>
            <param name="d">
              Deselected data, will use selected data if null.
            </param>
        </member>
        <member name="P:MiGfx.TextBox.TypeName">
            <summary>
              Type string unique to each UI element type.
            </summary>
        </member>
        <member name="P:MiGfx.TextBox.DeselectedData">
            <summary>
              Visual data for when deselected.
            </summary>
        </member>
        <member name="P:MiGfx.TextBox.SelectedData">
            <summary>
              Visual data for when selected.
            </summary>
        </member>
        <member name="M:MiGfx.TextBox.SetString(System.String)">
            <summary>
              Sets the displayed string keeping both the Label and TextListener components updated.
            </summary>
            <param name="str">
              The string to set.
            </param>
        </member>
        <member name="M:MiGfx.TextBox.OnUpdate(System.Single)">
            <summary>
              Updates the elements' logic.
            </summary>
            <param name="dt">
              Delta time.
            </param>
        </member>
        <member name="M:MiGfx.TextBox.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.TextBox.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiGfx.TextBox.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="M:MiGfx.TextBox.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiGfx.TextBox.Equals(MiGfx.TextBox)">
            <summary>
              If this object has the same values of the other object.
            </summary>
            <param name="other">
              The other object to check against.
            </param>
            <returns>
              True if both objects are concidered equal and false if they are not.
            </returns>
        </member>
        <member name="M:MiGfx.TextBox.Clone">
            <summary>
              Clones this object.
            </summary>
            <returns>
              A clone of this object.
            </returns>
        </member>
        <member name="M:MiGfx.TextBox.Create(System.String,SFML.Graphics.RenderWindow,MiGfx.Allignment,System.Boolean)">
            <summary>
              Constructs a textbox with default values.
            </summary>
            <param name="id">
              The object ID.
            </param>
            <param name="window">
              The render window.
            </param>
            <param name="allign">
              Text allignment.
            </param>
            <param name="multi">
              If text can be multiline.
            </param>
            <returns></returns>
        </member>
    </members>
</doc>
