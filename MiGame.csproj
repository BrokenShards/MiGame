<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
    <PackageId>ShardSoft.MiGame</PackageId>
    <Authors>Michael Furlong</Authors>
    <PackageLicenseFile>licence.md</PackageLicenseFile>
    <PackageReleaseNotes>### Version 1.0.0
- `GameState` now provides the `SubscribeEvents()` and `UnsubscribeEvents()` methods for subscribing
  to window events and have replaced `OnGainFocus(object, EventArgs)`, `OnLoseFocus(object, EventArgs)`
  and `OnTextEntered(object, TextEventArgs)`.
- MiGame now targets .Net 5 and has updated code style for C#9.
- Now depends on MiCore 1.0.0.
- Now depends on MiInput 1.0.0.
- Now depends on MiGfx 1.0.0.

### Version 0.5.0
- Changed SFML source to latest official SFML.Net repository.
- Updated MiCore to version 0.5.0.
- Updated MiInput to version 0.9.0.
- Updated MiGfx to version 0.9.0.

### Version 0.4.0
- Renamed to `MiGame` and updated to depend on `MiCore`, `MiGfx` and `MiInput`.

### Version 0.3.0
- `GameWindow.Run(IGameState)` now returns an `ExitCode` that is stored in `GameWindow.ExitCode`.
- `GameWindow.Exit(int)` has been replaced with `GameWindow.Exit(ExitCode)`.
- `GameState` now contains the virtual methods `OnGainFocus(object,EventArgs)`,
  `OnLoseFocus(object,EventArgs)`, `OnCloseRequest(object,EventArgs)` and 
  `OnTextEntered(object,TextEventArgs)` that are called on their respective window events.

### Version 0.2.0
- `GameWindow.OnUpdate(float)` has been replaced with `GameWindow.PreUpdate(float)` for updating
  logic before the current game state and `GameWindow.PostUpdate(float)` for updating logic after.
- `GameWindow.OnDraw()` has been replaced with `GameWindow.PreDraw()` for drawing content 
  before/underneath the current game state and `GameWindow.PostUpdate(float)` for drawing content
  after/above.
- When calling `StateManager.Push(IGameState)`, `GameState.OnStore()` is called for the current
  state before `GameState.OnLoad()` is called for the new state, as originally intended.

### Version 0.1.0
- Initial release.</PackageReleaseNotes>
    <Description>A basic game library for use with SFML.Net.</Description>
    <Copyright>Copyright (c) Michael Furlong 2021</Copyright>
    <PackageProjectUrl>https://github.com/BrokenShards/MiGame</PackageProjectUrl>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <OutputPath>bin\Debug\</OutputPath>
    <DocumentationFile>bin\Debug\MiGame.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <OutputPath>bin\Release\</OutputPath>
    <DocumentationFile>bin\Release\MiGame.xml</DocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="MiGameTest\**" />
    <EmbeddedResource Remove="MiGameTest\**" />
    <None Remove="MiGameTest\**" />
    <None Include="licence.md">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="ShardSoft.MiGfx" Version="1.0.0" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="XInputDotNetPure">
      <HintPath>Dependencies\XInputDotNetPure.dll</HintPath>
    </Reference>
  </ItemGroup>

</Project>
